#! /bin/bash

readonly HEIGHT=15
readonly WIDTH=125
readonly MENUTITLE="Instalador/configurador"
readonly BACKTITLE="Instalación y configuración de Linux"
readonly SCAN_DIR=/home/usuario/scan
readonly SHARE_DIR=/home/usuario/compartida
readonly NETWORK_TITLE="Configurar red"
readonly DNS='10.1.4.111,10.1.4.112'
readonly PROXY_PORT="3128"
readonly APT_PROXY="10.7.6.6"
readonly PROXY="10.10.254.218"
readonly NETWORK_NAME="red"
readonly APT_NETWORK_NAME="apt"
readonly PACKAGES_TITLE="Instalación de paquetes"
readonly PACKAGES=(
    "x11vnc" # programa para control remoto de entornos linux
    "libreoffice" # suite de herramientas
    "ssh" # protocolo para control remoto de terminales
    "unrar" #para rars
    "unzip" # para zips
    "vlc" # reproductor de audio y videos
    "thunderbird" # correo
    "thunderbird-locale-es" # en castellano
    "myspell-es" # correcion en castellano para libreoffice
    "ubuntu-restricted-extras" # algunas utilidades para ubuntu
    "firefox-locale-es" # traducción de firefox
    "ntp" # Protocolo para la sincronizacion del reloj
    "hplip"
    "hplip-gui" # drivers para impresoras HP
    "vim" # editor de texto
    "neovim" # fork de vim mejorado
    "gimp" # editor de imagenes
    "inkscape" # editor de imagenes vectorial
#    "google-chrome-stable" # chrome
#    "anydesk-stable" # control remoto
    "wine" # interfaz para windows
    "ocsinventory-agent" # programa para gestión de inventario
    "cifs-utils" # utilidades para el protocolo cifs
    "net-tools" # utilidades de red
    "ethtool" # utilidad para controlar los drivers de red y hardware
    "putty" # cliente de terminal ssh/telnet integrada
    "ubuntu-mate-desktop" # entorno mate
)
declare USER_NAME=usuario
declare USER_PASSWD=usuario


function print_message(){
  whiptail --title "$1" --backtitle "$BACKTITLE" --msgbox "$2" "$HEIGHT" "$WIDTH"
}


function user_exists(){
  exists=$(grep "${USER_NAME}" /etc/passwd)
  if [[ -z $exists ]]
  then
    false
  else 
    true
  fi
}


function network_exists(){
	if [[ -f "/etc/NetworkManager/system-connections/${1}.nmconnection" ]]
	then
    true
  else
    false
	fi
}


function reset_fds(){
  exec 0</dev/tty  # Reset stdin
  exec 1>/dev/tty  # Reset stdout
  exec 2>/dev/tty  # Reset stderr
}


function set_proxy(){
	gsettings set org.gnome.system.proxy mode manual
	gsettings set org.gnome.system.proxy.http port "$PROXY_PORT"
	gsettings set org.gnome.system.proxy.https port "$PROXY_PORT"
	gsettings set org.gnome.system.proxy.ftp port "$PROXY_PORT"
	gsettings set org.gnome.system.proxy.http host "$1"
	gsettings set org.gnome.system.proxy.https host "$1"
	gsettings set org.gnome.system.proxy.ftp host "$1"
}


function check_connectivity(){
  if [[ $(nmcli networking connectivity check) == "full" ]]
  then
    true
  else
    false
  fi
}


function create_user(){
  USER_TITLE="Configurar usuario"

  if ! whiptail \
    --title "$USER_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Utilizar usuario/usuario?" "$HEIGHT" "$WIDTH"
  then
    if [[ $user_exists ]]
    then
      if whiptail \
        --title "$USER_TITLE" \
        --backtitle "$BACKTITLE" \
        --yesno "El usuario $USER_NAME ya existe. Eliminar y crear uno nuevo?" \
        "$HEIGHT" "$WIDTH"
      then
        userdel -r "$USER_NAME"
        print_message "Se eliminó el usuario"
      else
        return
      fi
    fi

    while true
    do
      USER_NAME=$(
        whiptail \
          --title "$USER_TITLE" \
          --backtitle "$BACKTITLE" \
          --inputbox "Ingresar usuario" "$HEIGHT" "$WIDTH" \
          3>&1 1>&2 2>&3)

      USER_PASSWD=$(whiptail \
        --title "$USER_TITLE" \
        --backtitle "$BACKTITLE" \
        --inputbox "Ingresar contraseña" "$HEIGHT" "$WIDTH" \
        3>&1 1>&2 2>&3)

      if whiptail \
        --title "$USER_TITLE" \
        --backtitle "$BACKTITLE" \
        --yesno "Usuario: ${USER_NAME}\nContraseña: ${USER_PASSWD}\n\nConfirmar?" \
        "$HEIGHT" "$WIDTH"
      then
        break
      fi
    done
  fi
  sudo useradd -m "$USER_NAME" -p "$USER_PASSWD"
  print_message "$USER_TITLE" "El usuario fue creado."
}


function configure_network() {
  while true
  do
    network=$(whiptail \
      --title "$NETWORK_TITLE" \
      --radiolist "Seleccionar la red a donde va a estar la pc" "$HEIGHT" "$WIDTH" 6 \
      "1" "Ministerio - 10.7.6.0/23" OFF \
      "2" "Secretaría de Ciencia y Tecnología / Secretaría de Transporte: 10.8.50.0/23" OFF \
      "3" "Secretaría de Turismo - 10.10.14.0/24" OFF \
      "4" "Terminal de Santa Fe - 10.7.48.0/24" OFF \
      "5" "Enerfe Puerto Santa Fe - 10.10.20.0/24" OFF \
      "6" "Aeropuerto de Sauce Viejo - 10.8.44.0/24" OFF \
      2>&1 > /dev/tty
    )

    declare gateway;
    declare network_mask;
    case "$network" in
      1) 
        network="Ministerio"
        gateway="10.7.6.200"
        network_mask="23";;
      2)
        network="Sec. de Ciencia y Tecnología / Sec. de Transporte"
        gateway="10.8.50.200"
        network_mask="23";;
      3)
        network="Secretaría de Turismo"
        gateway="10.10.14.200"
        network_mask="24";;
      4)
        network="Terminal de Santa Fe"
        gateway="10.7.48.200"
        network_mask="24";;
      5)
        network="Enerfe Puerto de Santa Fe"
        gateway="10.10.20.200"
        network_mask="24";;
      6)
        network="Aeropuerto de Sauce Viejo"
        gateway="10.8.44.200"
        network_mask="24";;
    esac

    apt_ip=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar una IP que tenga acceso al $APT_PROXY para instalar los paquetes" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    user_ip=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar la IP final del usuario" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    device=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar el dispositivo de red\n$(nmcli device | grep ethernet)" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    if whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --yesno """
          Red: $network
          Gateway: $gateway
          Mascara de subred: $network_mask
          IP del $APT_PROXY: $apt_ip
          IP final del usuario: $user_ip
          Disposito: $device
          Confirmar?""" "$HEIGHT" "$WIDTH"
        then
      break
    fi
  done

	echo "Acquire::http::proxy \"http://$APT_PROXY:$PROXY_PORT\";
Acquire::https::proxy \"http://$APT_PROXY:$PROXY_PORT\";
Acquire::ftp::proxy \"http://$APT_PROXY:$PROXY_PORT\";" | sudo tee /etc/apt/apt.conf > /dev/null

	if network_exists $APT_NETWORK_NAME
	then
		nmcli connection delete "$APT_NETWORK_NAME"
	fi
	nmcli connection add type ethernet ifname "$device" con-name "$APT_NETWORK_NAME" ip4 "$apt_ip/23" gw4 "$GATEWAY" ipv4.dns "$DNS"

	if network_exists $NETWORK_NAME
	then
		nmcli connection delete "$NETWORK_NAME"
	fi
	nmcli connection add type ethernet ifname "$device" con-name "$NETWORK_NAME" ip4 "$user_ip/$gateway" gw4 "$GATEWAY" ipv4.dns "$DNS"
}
function install_packages(){

  if ! user_exists 
  then
    print_message "$PACKAGES_TITLE" "El usuario no está creado aún"
    return
  fi

  if ! nmcli connection up $APT_NETWORK_NAME
  then
    print_message "$PACKAGES_TITLE" "La red para instalar los paquetes no está configurada o el internet está desactivado."
    return
  fi

  set_proxy $APT_PROXY

  reset_fds

	if ! sudo apt update
  then 
    print_message "$PACKAGES_TITLE" "Error: Ocurrió un problema al intentar actualizar el repositorio"
    return
  fi
	
  if ! sudo apt install "${PACKAGES[@]}"
  then
    print_message "$PACKAGES_TITLE" "Error: Ocurrió un problema al intentar instalar los paquetes"
    return
  fi

  sudo apt upgrade

  sudo systemctl enable cups-browsed

  configure_vnc
  configure_samba
  
  if whiptail\
    --title "$PACKAGES_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Desactivar búsqueda de las impresoras?" "$HEIGHT" "$WIDTH"
  then
    sudo sed -i 's/^BrowseRemoteProtocols.*/BrowseRemoteProtocols none/g' /etc/cups/cups-browsed.conf
    sudo systemctl reload-or-restart cups-browsed
    print_message "$PACKAGES_TITLE" "Se ha desactivado la búsqueda de impresoras"
  fi

  if whiptail\
    --title "$PACKAGES_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Crear accesos directos en el escritorio?" "$HEIGHT" "$WIDTH"
  then
    cp /usr/share/applications/{atril,vlc,thunderbird,gimp}.desktop /home/"$USER_NAME"/Escritorio
    cp /usr/share/applications/libreoffice-{calc,draw,impress,math,writer}.dekstop /home/"$USER_NAME"/Escritorio/
  fi

  set_proxy $PROXY
}


function configure_vnc(){
	sudo cp x11vnc.service /etc/systemd/system/
  echo "[Unit]
Description=x11vnc service
After=display-manager.service network.target syslog.target
[Service]
Type=simple
ExecStart=/usr/bin/x11vnc -forever -display :0 -auth guess -passwd 3e2w1q
ExecStop=/usr/bin/killall x11vnc
Restart=on-failure
[Install]
WantedBy=multi-user.target " | sudo tee -a /etc/systemd/system/x11vnc.service > /dev/null
	sudo systemctl enable --now x11vnc
}


function configure_samba(){
	if [[ ! -d $SCAN_DIR ]]
	then
		sudo mkdir $SCAN_DIR
		sudo chown usuario:usuario $SCAN_DIR
		sudo chmod 777 $SCAN_DIR
		echo "[scan]
		path = /home/usuario/Escritorio/scan
		public = yes
		writable = yes
		browseable = yes
		read only = no
		force directory mode = 0777
		force create mode = 0777" | sudo tee -a /etc/samba/smb.conf > /dev/null
	fi

	if [[ ! -d $SHARE_DIR ]]
	then
		sudo mkdir $SHARE_DIR
		sudo chown usuario:usuario $SHARE_DIR
		sudo chmod 777 $SHARE_DIR
		echo "[compartida]
		path = /home/usuario/compartida
		public = yes
		writable = yes
		browseable = yes
		read only = no
		force directory mode = 0777
		force create mode = 0777" | sudo tee -a /etc/samba/smb.conf > /dev/null
	fi

	sudo cp smb.conf /etc/samba/smb.conf
	sudo systemctl reload-or-restart smbd
}




function configure_proxy(){
  readonly PROXY_TITLE="Configurar proxy"
  proxy=$(whiptail \
    --title "$PROXY_TITLE" \
    --backtitle "$BACKTITLE" \
    --menu "Elegi un proxy" \
    "$HEIGHT" "$WIDTH" "2" \
    "10.10.254.218" "Proxy del intranet" \
    "10.7.6.6" "Proxy para APT" \
    2>&1 > /dev/tty)
  set_proxy "$proxy"
  print_message "$PROXY_TITLE" "El proxy se configuró en $proxy"
}


function finish_insllation(){
  readonly FINISH_INSTALL_TITLE="Finalizar instalación"

  if ! user_exists
  then
    print_message "$FINISH_INSTALL_TITLE" "El usuario aún no fue creado"
    return
  fi

  if ! network_exists "$NETWORK_NAME"
  then
    print_message "$FINISH_INSTALL_TITLE" "La red del intranet todavía no está seteada"
    return
  fi

  if whiptail \
    --title "$FINISH_INSTALL_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Es necesario reiniciar el sistema para terminar la instalación.\nFinalizar y reiniciar?" "$HEIGHT" "$WIDTH"
  then
    nmcli connection delete "$APT_NETWORK_NAME"
    nmcli connection up "$NETWORK_NAME"
    set_proxy "$PROXY"
    sudo systemctl reboot
  fi
}




function main_menu(){
  readonly CHOICE_HEIGHT=6
  OPTIONS=(\
    1 "Crear usuario"
    2 "Configurar red"
    3 "Instalar paquetes"
    4 "Configurar proxy"
    5 "Terminar instalacion/configuración"
    6 "Salir"
  )

  while true;
  do
    CHOICE=$(whiptail --clear \
      --backtitle "$BACKTITLE" \
      --title "$MENUTITLE" \
      --menu "$MENU" \
      "$HEIGHT" "$WIDTH" "$CHOICE_HEIGHT" \
      "${OPTIONS[@]}" \
      2>&1 > /dev/tty)

    case "$CHOICE" in
      1) create_user;;
      2) configure_network;;
      3) install_packages;;
      4) configure_proxy;;
      5) finish_insllation;;
      *) break;;
    esac
  done
}

main_menu
