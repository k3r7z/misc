#! /bin/bash

# TODO Mover x11 a otra funcion
# TODO Mover accesos directos a otra funcion
# TODO Modificar la red "Red" si ya existe, sino crearla
# TODO ver configuracion del cups 

CREATE_USER_COMPLETED=false
INSTALL_PACKAGES_COMPLETED=false
NETWORK_CONFIGURED=false
SAMBA_CONFIGURED=false
VNC_CONFIGURED=false
DNS='10.1.4.111,10.1.4.112'
HEIGHT=15
WIDTH=75
CHOICE_HEIGHT=4
MENUTITLE="Instalador/configurador"
BACKTITLE="Instalación y configuración de Linux"


function print_message(){
  whiptail --title "$1" --backtitle "$BACKTITLE" --msgbox "$2" "$HEIGHT" "$WIDTH"
}


function create_user(){
  USER_TITLE="Configurar usuario"
  user="usuario"
  password="usuario"

  if  whiptail --title "$USER_TITLE" --backtitle "$BACKTITLE" --yesno "Utilizar usuario/usuario?" "$HEIGHT" "$WIDTH"; then


  if ! whiptail --title "$USER_TITLE" --backtitle "$BACKTITLE" --yesno "Utilizar usuario/usuario?" "$HEIGHT" "$WIDTH"; then
    while true; do
      user=$(
        whiptail \
          --title "$USER_TITLE" \
          --backtitle "$BACKTITLE" \
          --inputbox "Ingresar usuario" "$HEIGHT" "$WIDTH" \
          3>&1 1>&2 2>&3)

      password=$(whiptail \
        --title "$USER_TITLE" \
        --backtitle "$BACKTITLE" \
        --inputbox "Ingresar contraseña" "$HEIGHT" "$WIDTH" \
        3>&1 1>&2 2>&3)

      if whiptail --title "$USER_TITLE" --backtitle "$BACKTITLE" --yesno "Confirmar?\nUsuario: ${user}\nContraseña: ${password}" "$HEIGHT" "$WIDTH"; then
        break
      fi
    done
  fi

  #sudo useradd -m "$user" -p "$password"
  echo "$user / $password"
	CREATE_USER_COMPLETED=true
}


function install_packages(){
  PACKAGES_TITLE="Instalación de paquetes"
  PACKAGES=(
    "x11vnc" # programa para control remoto de entornos linux
    "libreoffice" # suite de herramientas
    "ssh" # protocolo para control remoto de terminales
    "unrar" #para rars
    "unzip" # para zips
    "vlc" # reproductor de audio y videos
    "thunderbird" # correo
    "thunderbird-l10n-es-ar" # en castellano
    "myspell-es" # correcion en castellano para libreoffice
    "ubuntu-restricted-extras" # algunas utilidades para ubuntu
    "firefox-locale-es" # traducción de firefox
    "ntp" # Protocolo para la sincronizacion del reloj
    "hplip hplip-gui" # drivers para impresoras HP
    "vim" # editor de texto
    "neovim" # fork de vim mejorado
    "gimp" # editor de imagenes
    "inkscape" # editor de imagenes vectorial
    "google-chrome-stable" # chrome
    "anydesk" # control remoto
    "wine" # interfaz para windows
    "ocsinventory-agent" # programa para gestión de inventario
    "cifs-utils" # utilidades para el protocolo cifs
    "net-tools" # utilidades de red
    "ethtool" # utilidad para controlar los drivers de red y hardware
    "putty" # cliente de terminal ssh/telnet integrada
    "ubuntu-mate-desktop"
  )

	sudo apt update
	sudo apt install "${PACKAGES[*]}"
	sudo apt upgrade
	sudo apt --fix-broken

  sudo systemctl enable cups-browsed

  configure_vnc
  configure_samba
  
  if whiptail\
    --title "$PACKAGES_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Desactivar búsqueda de las impresoras?" "$HEIGHT" "$WIDTH"
  then
    sudo sed -i 's/^BrowseRemoteProtocols.*/BrowseRemoteProtocols none/g' /etc/cups/cups-browsed.conf
    sudo systemctl reload-or-restart cups-browsed
    print_message "$PACKAGES_TITLE" "Se ha desactivado la búsqueda de impresoras"
  fi

  if whiptail\
    --title "$PACKAGES_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Crear accesos directos en el escritorio?" "$HEIGHT" "$WIDTH"
  then
    cp /usr/share/applications/{atril,vlc,thunderbird,gimp}.desktop ~/Escritorio
    cp /usr/share/applications/libreoffice-{calc,draw,impress,math,writer}.dekstop ~/Escritorio/
  fi
	
	INSTALL_PACKAGES_COMPLETED=true
}


function configure_vnc(){
	sudo cp x11vnc.service /etc/systemd/system/
	sudo systemctl enable --now x11vnc
}


function configure_samba(){
	scan_dir=/home/usuario/scan
	share_dir=/home/usuario/compartida
	if [[ ! -d $scan_dir ]]
	then
		sudo mkdir $scan_dir
		sudo chown usuario:usuario $scan_dir
		sudo chmod 777 $scan_dir
		echo "[scan]
		path = /home/usuario/Escritorio/scan
		public = yes
		writable = yes
		browseable = yes
		read only = no
		force directory mode = 0777
		force create mode = 0777" | sudo tee -a /etc/samba/smb.conf > /dev/null
	fi

	if [[ ! -d $share_dir ]]
	then
		sudo mkdir $share_dir
		sudo chown usuario:usuario $share_dir
		sudo chmod 777 $share_dir
		echo "[compartida]
		path = /home/usuario/compartida
		public = yes
		writable = yes
		browseable = yes
		read only = no
		force directory mode = 0777
		force create mode = 0777" > /etc/samba/smb.conf
	fi

	sudo cp smb.conf /etc/samba/smb.conf
	sudo systemctl reload-or-restart smbd
	SAMBA_CONFIGURED=true
}


function configure_network() {
  NETWORK_TITLE="Configurar red"
  GATEWAY='10.7.6.200'
  PROXY="10.10.254.218"
  PROXY_PORT="3128"


  while true; do
    proxy=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --radiolist "Elegir proxy" "$HEIGHT" "$WIDTH" 2 \
      "10.10.254.218" "SCAI" ON \
      "10.7.6.6" "Sectorial" OFF \
      3>&2 2>&1 1>&3
    )

    ip=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar IP" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    device=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar dispositivo\n$(nmcli device)" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    network_name=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar nombre para la red" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    if whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --yesno "Confirmar?\nProxy: ${proxy}\nIP: ${ip}\nDisposito: ${device}\nNombre: ${network_name}" "$HEIGHT" "$WIDTH" ; then
      break
    fi
  done


	gsettings set org.gnome.system.proxy.http host ${PROXY}
	gsettings set org.gnome.system.proxy.http port ${PROXY_PORT}
	gsettings set org.gnome.system.proxy.https host ${PROXY}
	gsettings set org.gnome.system.proxy.https port ${PROXY_PORT}
	gsettings set org.gnome.system.proxy.ftp host ${PROXY}
	gsettings set org.gnome.system.proxy.ftp port ${PROXY_PORT}

	echo "Acquire::http::proxy \"http://10.7.6.6:3128\";
	Acquire::https::proxy \"http://10.7.6.6:3128\";
	Acquire::ftp::proxy \"http://10.7.6.6:3128\";" | sudo tee /etc/apt/apt.conf > /dev/null

	if [[ -f "/etc/NetworkManager/system-connections/${network_name}.nmconnection" ]]
	then
		nmcli connection delete "$network_name"
	fi
	nmcli connection add type ethernet ifname "$device" con-name "$network_name" ip4 "$ip/23" gw4 "$GATEWAY" ipv4.dns "$DNS"
	nmcli connection up "$network_name"

	NETWORK_CONFIGURED=true
}






function print_mark(){
	printf " ("
	if $1
	then
		printf '\u2714'
	else
		printf '\u2A2F'
	fi
	printf ")\n"
}




function main_menu(){
  OPTIONS=(\
    1 "Crear usuario"
    2 "Configurar red"
    3 "Instalar paquetes"
    4 "Salir"
  )

  while true;
  do
    CHOICE=$(whiptail --clear \
      --backtitle "$BACKTITLE" \
      --title "$MENUTITLE" \
      --menu "$MENU" \
      "$HEIGHT" "$WIDTH" "$CHOICE_HEIGHT" \
      "${OPTIONS[@]}" \
      2>&1 > /dev/tty)

    case "$CHOICE" in
      1) create_user;;
      2) configure_network;;
      3) install_packages;;
      *) break;;
    esac
  done
}

main_menu
