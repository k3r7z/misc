#! /bin/bash

readonly HEIGHT=15
readonly WIDTH=75
readonly CHOICE_HEIGHT=4
readonly MENUTITLE="Instalador/configurador"
readonly BACKTITLE="Instalación y configuración de Linux"
readonly SCAN_DIR=/home/usuario/scan
readonly SHARE_DIR=/home/usuario/compartida
readonly NETWORK_TITLE="Configurar red"
readonly DNS='10.1.4.111,10.1.4.112'
readonly GATEWAY='10.7.6.200'
readonly PROXY_PORT="3128"
readonly APT_PROXY="10.7.6.6"
readonly PROXY="10.10.254.218"
readonly NETWORK_NAME="Ministerio"
readonly APT_NETWORK_NAME="Ministerio"
readonly PACKAGES=(
    "x11vnc" # programa para control remoto de entornos linux
    "libreoffice" # suite de herramientas
    "ssh" # protocolo para control remoto de terminales
    "unrar" #para rars
    "unzip" # para zips
    "vlc" # reproductor de audio y videos
    "thunderbird" # correo
    "thunderbird-l10n-es-ar" # en castellano
    "myspell-es" # correcion en castellano para libreoffice
    "ubuntu-restricted-extras" # algunas utilidades para ubuntu
    "firefox-locale-es" # traducción de firefox
    "ntp" # Protocolo para la sincronizacion del reloj
    "hplip hplip-gui" # drivers para impresoras HP
    "vim" # editor de texto
    "neovim" # fork de vim mejorado
    "gimp" # editor de imagenes
    "inkscape" # editor de imagenes vectorial
    "google-chrome-stable" # chrome
    "anydesk-stable" # control remoto
    "wine" # interfaz para windows
    "ocsinventory-agent" # programa para gestión de inventario
    "cifs-utils" # utilidades para el protocolo cifs
    "net-tools" # utilidades de red
    "ethtool" # utilidad para controlar los drivers de red y hardware
    "putty" # cliente de terminal ssh/telnet integrada
    "ubuntu-mate-desktop" # entorno mate
)
declare USER_NAME=usuario
declare USER_PASSWD=usuario


function print_message(){
  whiptail --title "$1" --backtitle "$BACKTITLE" --msgbox "$2" "$HEIGHT" "$WIDTH"
}


function user_exists(){
  exists=$(grep "${USER_NAME}" /etc/passwd)
  if [[ -z $exists ]]
  then
    false
  else 
    true
  fi
}


function network_exists(){
	if [[ -f "/etc/NetworkManager/system-connections/${1}.nmconnection" ]]
	then
    true
  else
    false
	fi
}


function create_user(){
  USER_TITLE="Configurar usuario"

  if ! whiptail \
    --title "$USER_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Utilizar usuario/usuario?" "$HEIGHT" "$WIDTH"
  then
    if [[ $user_exists ]]
    then
      if whiptail \
        --title "$USER_TITLE" \
        --backtitle "$BACKTITLE" \
        --yesno "El usuario $USER_NAME ya existe. Eliminar y crear uno nuevo?" \
        "$HEIGHT" "$WIDTH"
      then
        userdel -r "$USER_NAME"
        print_message "Se eliminó el usuario"
      else
        return
      fi
    fi

    while true
    do
      USER_NAME=$(
        whiptail \
          --title "$USER_TITLE" \
          --backtitle "$BACKTITLE" \
          --inputbox "Ingresar usuario" "$HEIGHT" "$WIDTH" \
          3>&1 1>&2 2>&3)

      USER_PASSWD=$(whiptail \
        --title "$USER_TITLE" \
        --backtitle "$BACKTITLE" \
        --inputbox "Ingresar contraseña" "$HEIGHT" "$WIDTH" \
        3>&1 1>&2 2>&3)

      if whiptail \
        --title "$USER_TITLE" \
        --backtitle "$BACKTITLE" \
        --yesno "Confirmar?\nUsuario: ${USER_NAME}\nContraseña: ${USER_PASSWD}" \
        "$HEIGHT" "$WIDTH"
      then
        sudo useradd -m "$USER_NAME" -p "$USER_PASSWD"
        break
      fi
    done
  fi

}


function install_packages(){
  readonly PACKAGES_TITLE="Instalación de paquetes"

  if ! network_exists "$APT_NETWORK_NAME"
  then
    print_message "$PACKAGES_TITLE" "La red para instalar los paquetes no está configurada. Configurala en la sección de configurar red en el menú principal."
    return
  else
    nmcli connection up "$APT_NETWORK_NAME"
  fi

  sudo wget -q -O - https://dl.google.com/linux/linux_signing_key.pub |
    sudo apt-key add -
  echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" |
    sudo tee /etc/apt/sources.list.d/google-chrome.list

  wget -qO - https://keys.anydesk.com/repos/DEB-GPG-KEY |
    sudo apt-key add -
  echo "deb http://deb.anydesk.com/ all main" |
    sudo tee /etc/apt/sources.list.d/anydesk-stable.list


	sudo apt update
	sudo apt install "${PACKAGES[*]}"
	sudo apt --fix-broken

  sudo systemctl enable cups-browsed

  configure_vnc
  configure_samba
  
  if whiptail\
    --title "$PACKAGES_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Desactivar búsqueda de las impresoras?" "$HEIGHT" "$WIDTH"
  then
    sudo sed -i 's/^BrowseRemoteProtocols.*/BrowseRemoteProtocols none/g' /etc/cups/cups-browsed.conf
    sudo systemctl reload-or-restart cups-browsed
    print_message "$PACKAGES_TITLE" "Se ha desactivado la búsqueda de impresoras"
  fi

  if whiptail\
    --title "$PACKAGES_TITLE" \
    --backtitle "$BACKTITLE" \
    --yesno "Crear accesos directos en el escritorio?" "$HEIGHT" "$WIDTH"
  then
    cp /usr/share/applications/{atril,vlc,thunderbird,gimp}.desktop /home/"$USER_NAME"/Escritorio
    cp /usr/share/applications/libreoffice-{calc,draw,impress,math,writer}.dekstop /home/"$USER_NAME"/Escritorio/
  fi
}


function configure_vnc(){
	sudo cp x11vnc.service /etc/systemd/system/
	sudo systemctl enable --now x11vnc
}


function configure_samba(){
	if [[ ! -d $SCAN_DIR ]]
	then
		sudo mkdir $SCAN_DIR
		sudo chown usuario:usuario $SCAN_DIR
		sudo chmod 777 $SCAN_DIR
		echo "[scan]
		path = /home/usuario/Escritorio/scan
		public = yes
		writable = yes
		browseable = yes
		read only = no
		force directory mode = 0777
		force create mode = 0777" | sudo tee -a /etc/samba/smb.conf > /dev/null
	fi

	if [[ ! -d $SHARE_DIR ]]
	then
		sudo mkdir $SHARE_DIR
		sudo chown usuario:usuario $SHARE_DIR
		sudo chmod 777 $SHARE_DIR
		echo "[compartida]
		path = /home/usuario/compartida
		public = yes
		writable = yes
		browseable = yes
		read only = no
		force directory mode = 0777
		force create mode = 0777" > /etc/samba/smb.conf
	fi

	sudo cp smb.conf /etc/samba/smb.conf
	sudo systemctl reload-or-restart smbd
}


function configure_network() {
  print_message "$NETWORK_TITLE" "Asegurate de tener el cable de red conectado antes de continuar"

  while true; do
    apt_ip=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar una IP que tenga acceso al $APT_PROXY para poder descargar los paquetes" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    user_ip=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar la IP final del usuario" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    device=$(
      whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --inputbox "Ingresar el dispositivo de red\n$(nmcli device | grep ethernet)" "$HEIGHT" "$WIDTH" \
      3>&2 2>&1 1>&3
    )

    if whiptail \
      --title "$NETWORK_TITLE" \
      --backtitle "$BACKTITLE" \
      --yesno "Confirmar?\nIP para instalar paquetes: $apt_ip\nIP final del usuario: $user_ip\nDisposito: $device" "$HEIGHT" "$WIDTH"
        then
      break
    fi
  done


	gsettings set org.gnome.system.proxy.http host "$PROXY"
	gsettings set org.gnome.system.proxy.http port "$PROXY_PORT"
	gsettings set org.gnome.system.proxy.https host "$PROXY"
	gsettings set org.gnome.system.proxy.https port "$PROXY_PORT"
	gsettings set org.gnome.system.proxy.ftp host "$PROXY"
	gsettings set org.gnome.system.proxy.ftp port "$PROXY_PORT"
	gsettings set org.gnome.system.proxy.ftp mode manual

	echo "Acquire::http::proxy \"http://10.7.6.6:3128\";
Acquire::https::proxy \"http://10.7.6.6:3128\";
Acquire::ftp::proxy \"http://10.7.6.6:3128\";" | sudo tee /etc/apt/apt.conf > /dev/null

	if network_exists $APT_NETWORK_NAME
	then
		nmcli connection delete "$APT_NETWORK_NAME"
	fi
	nmcli connection add type ethernet ifname "$device" con-name "$APT_NETWORK_NAME" ip4 "$apt_ip/23" gw4 "$GATEWAY" ipv4.dns "$DNS"

	if network_exists $NETWORK_NAME
	then
		nmcli connection delete "$NETWORK_NAME"
	fi
	nmcli connection add type ethernet ifname "$device" con-name "$NETWORK_NAME" ip4 "$user_ip/23" gw4 "$GATEWAY" ipv4.dns "$DNS"
  nmcli connection "$NETWORK_NAME" up
}


function main_menu(){
  OPTIONS=(\
    1 "Crear usuario"
    2 "Configurar red"
    3 "Instalar paquetes"
    4 "Salir"
  )

  while true;
  do
    CHOICE=$(whiptail --clear \
      --backtitle "$BACKTITLE" \
      --title "$MENUTITLE" \
      --menu "$MENU" \
      "$HEIGHT" "$WIDTH" "$CHOICE_HEIGHT" \
      "${OPTIONS[@]}" \
      2>&1 > /dev/tty)

    case "$CHOICE" in
      1) create_user;;
      2) configure_network;;
      3) install_packages;;
      *) break;;
    esac
  done
}

main_menu
